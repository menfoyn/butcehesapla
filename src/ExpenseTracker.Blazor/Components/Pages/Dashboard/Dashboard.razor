@page "/dashboard"
@using System
@using System.Text.Json
@using ExpenseTracker.Dashboard
@using ExpenseTracker.ExpenseReports
@using System.Linq
@using ExpenseTracker.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Identity
@inject IDashboardAppService DashboardAppService
@inject IJSRuntime JS
@inject IAuthorizationService AuthorizationService
@inject IIdentityUserAppService IdentityUserAppService

<!-- Dashboard page: shows summary cards, a weekly chart, and a fallback table -->

<h3 class="mb-3">Gösterge Paneli</h3>

@if (_canViewAll)
{
    <div class="d-flex align-items-center gap-2 mb-3">
        <label class="form-label mb-0">Kullanıcı:</label>
        <select class="form-select" style="max-width: 280px" @onchange="OnUserChanged">
            <option value="">(Tümü)</option>
            @foreach (var u in _users)
            {
                <option value="@u.Id" selected="@(_selectedUserId == u.Id)">@u.UserName (@u.Email)</option>
            }
        </select>
    </div>
}

@if (dashboard == null)
{
    <p>Yükleniyor...</p>
}
else
{
    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="card shadow-sm p-3">
                <h5>Bütçe Özeti</h5>
                @{
                    var totalBudget = dashboard.TotalBudget;
                    // Eğer backend doğru faturalananı dönmüyorsa, haftalık gerçekleşen toplamını yedek olarak kullan
                    var invoiced    = dashboard.InvoicedAmount > 0 ? dashboard.InvoicedAmount : (dashboard.ActualSeries?.Sum() ?? 0m);
                    var remaining   = Math.Max(0m, totalBudget - invoiced);
                    var usedPct     = totalBudget > 0 ? (int)Math.Min(100, (invoiced * 100m / totalBudget)) : 0;
                }
                <p><strong>Toplam Bütçe:</strong> ₺@totalBudget.ToString("N2")</p>
                <p><strong>Faturalanan:</strong> ₺@invoiced.ToString("N2")</p>
                <p><strong>Kalan:</strong> ₺@remaining.ToString("N2")</p>
                <div class="progress" style="height:10px;">
                    <div class="progress-bar" role="progressbar" style="width:@usedPct%" aria-valuenow="@usedPct" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small class="text-muted">Kullanım: @usedPct%</small>
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="card shadow-sm p-3">
                <h5>Çalışma Süresi</h5>
                <p><strong>Toplam Saat:</strong> @dashboard.TotalHours saat</p>
                <p><strong>Çalışılan:</strong> @dashboard.WorkedHours saat</p>
                <p><strong>Kalan:</strong> @dashboard.RemainingHours saat</p>
            </div>
        </div>
    </div>

    <div class="card shadow-sm p-3 mb-3">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="mb-0">Kategori Dağılımı</h5>
            @if (_visibleCategories.Count > 0)
            {
                var totalCat = _visibleCategories.Sum(x => x.Amount);
                <span class="text-muted small">Toplam: ₺@totalCat.ToString("N2")</span>
            }
        </div>

        @if ((_visibleCategories.Count) == 0)
        {
            <div class="text-muted">Kategori verisi bulunamadı.</div>
        }
        else
        {
            <div class="row g-3">
                <div class="col-md-7">
                    <canvas id="categoryChart" height="180"></canvas>
                </div>
                <div class="col-md-5">
                    <ul class="list-group list-group-flush">
                        @foreach (var c in _visibleCategories)
                        {
                            var pct = c.Percent;
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div class="d-flex flex-column">
                                    <span class="fw-semibold">@c.Name</span>
                                    <small class="text-muted">₺@c.Amount.ToString("N2")</small>
                                </div>
                                <span class="badge rounded-pill bg-light text-dark border">% @pct</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <details class="mt-3">
                <summary class="small text-muted">Detay tabloyu göster</summary>
                <table class="table table-sm align-middle mt-2">
                    <thead class="table-light">
                        <tr>
                            <th>Kategori</th>
                            <th class="text-end">Tutar</th>
                            <th class="text-end">%</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var c in _visibleCategories)
                        {
                            <tr>
                                <td>@c.Name</td>
                                <td class="text-end">₺@c.Amount.ToString("N2")</td>
                                <td class="text-end">@c.Percent</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </details>
        }
    </div>

    <h5 class="mt-4">Projeler</h5>
    <div class="row row-cols-1 row-cols-md-3 g-3">
        @foreach (var p in dashboard.ProjectSummaries)
        {
            <div class="col">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <h6 class="card-title mb-2">@p.ProjectName</h6>
                            <span class="badge bg-secondary">@p.ProjectId.ToString()[..8]</span>
                        </div>
                        <div class="small text-muted mb-2">Bütçe: ₺@p.Budget.ToString("N2")</div>
                        <div class="mb-2"><strong>Faturalanan:</strong> ₺@p.InvoicedAmount.ToString("N2")</div>
                        <div class="progress mb-2" style="height:8px;">
                            <div class="progress-bar" role="progressbar"
                                 style="width:@(p.Budget > 0 ? Math.Min(100, (int)(p.InvoicedAmount * 100 / p.Budget)) : 0)%"></div>
                        </div>
                        @{
                            var projUsedPct = p.Budget > 0 ? (int)Math.Min(100, (p.InvoicedAmount * 100m / p.Budget)) : 0;
                        }
                        <div class="small">Kalan: ₺@p.RemainingAmount.ToString("N2") — <span class="text-muted">@projUsedPct% kullanıldı</span></div>
                        <div class="mt-3">
                            <div class="small text-muted mb-1">Haftalık Harcama</div>
                            <canvas id="@($"pc-{p.ProjectId:N}")" height="90"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <h5 class="mt-4">Haftalık Durum</h5>

    <div class="card shadow-sm mb-3">
        <div class="card-body">
            <canvas id="weeklyChart" height="120"></canvas>
        </div>
    </div>

    <details class="mb-4">
        <summary>Tabloyu göster (yedek)</summary>
        <table class="table table-bordered mt-3">
            <thead>
            <tr>
                <th>Hafta</th>
                <th>Gerçekleşen</th>
                <th>Faturalanan</th>
                <th>Çalışma Saati</th>
            </tr>
            </thead>
            <tbody>
                @{
                    var hasWeekly = (dashboard?.WeeklyData?.Count ?? 0) > 0;

                    // Determine how many points we can safely build from the series
                    var count = new[]
                    {
                        dashboard?.WeekLabels?.Count ?? 0,
                        dashboard?.ActualSeries?.Count ?? 0,
                        dashboard?.InvoicedSeries?.Count ?? 0
                    }.Min();

                    var rows = hasWeekly
                        ? dashboard!.WeeklyData!
                        : (count > 0
                            ? Enumerable.Range(0, count)
                                .Select(i => new WeeklyChartDataDto
                                {
                                    WeekLabel = dashboard!.WeekLabels![i],
                                    Actual     = dashboard!.ActualSeries![i],
                                    Invoiced   = dashboard!.InvoicedSeries![i],
                                    WorkedHours = (dashboard!.WorkedHoursSeries != null && dashboard!.WorkedHoursSeries.Count > i)
                                        ? dashboard.WorkedHoursSeries[i]
                                        : 0
                                })
                                .ToList()
                            : new List<WeeklyChartDataDto>());
                }

                @if (rows.Count > 0)
                {
                    foreach (var item in rows)
                    {
                        <tr>
                            <td>@item.WeekLabel</td>
                            <td>₺@item.Actual.ToString("N2")</td>
                            <td>₺@item.Invoiced.ToString("N2")</td>
                            <td>@item.WorkedHours saat</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-muted">Haftalık veri bulunamadı.</td>
                    </tr>
                }
            </tbody>
        </table>
    </details>
}

<!-- Chart.js (provided by LeptonX theme assets). If the path changes in your theme, update below. -->
<script src="/_content/Volo.Abp.AspNetCore.Components.Web.LeptonXLiteTheme/side-menu/libs/chart.js/Chart.min.js"></script>
<script>
    window.renderWeeklyChart = function (labels, actual, invoiced, worked) {
        const ctx = document.getElementById('weeklyChart');
        if (!ctx || !window.Chart) return;
        // dispose previous instance if any
        if (ctx._chart) { ctx._chart.destroy(); }
        const data = {
            labels: labels,
            datasets: [
                {
                    label: 'Gerçekleşen',
                    data: actual,
                    fill: false,
                    tension: 0.3,
                    borderColor: '#59a14f',
                    backgroundColor: '#59a14f',
                    pointBackgroundColor: '#59a14f',
                    pointBorderColor: '#fff',
                    pointRadius: 4
                },
                {
                    label: 'Faturalanan',
                    data: invoiced,
                    fill: false,
                    tension: 0.3,
                    borderColor: '#4e79a7',
                    backgroundColor: '#4e79a7',
                    pointBackgroundColor: '#4e79a7',
                    pointBorderColor: '#fff',
                    pointRadius: 4
                },
                {
                    label: 'Çalışılan Saat',
                    data: worked,
                    fill: false,
                    tension: 0.3,
                    borderColor: '#f28e2b',
                    backgroundColor: '#f28e2b',
                    pointBackgroundColor: '#f28e2b',
                    pointBorderColor: '#fff',
                    pointRadius: 4
                }
            ]
        };
        const cfg = {
          type: 'line',
          data: data,
          options: {
            responsive: true,
            plugins: {
              legend: { position: 'top' },
              tooltip: {
                callbacks: {
                  label: (ctx) => {
                    const v = ctx.parsed.y;
                    const label = ctx.dataset.label || '';
                    if (label.includes('Saat')) return `${label}: ${v}`;
                    return `${label}: ₺${Number(v).toLocaleString('tr-TR', { minimumFractionDigits: 2 })}`;
                  }
                }
              }
            },
            scales: {
              y: {
                ticks: {
                  callback: function(value){ return '₺' + Number(value).toLocaleString('tr-TR'); }
                }
              }
            }
          }
        };
        ctx._chart = new Chart(ctx, cfg);
    }

    window.renderProjectCharts = function (items) {
        if (!Array.isArray(items)) return;
        items.forEach(it => {
            const ctx = document.getElementById(it.id);
            if (!ctx || !window.Chart) return;
            if (ctx._chart) { ctx._chart.destroy(); }
            const data = {
                labels: it.labels,
                datasets: [
                    {
                        label: 'Harcanan',
                        data: it.actual,
                        fill: false,
                        tension: 0.3,
                        borderColor: '#4e79a7',
                        backgroundColor: '#4e79a7',
                        pointBackgroundColor: '#4e79a7',
                        pointBorderColor: '#fff',
                        pointRadius: 4
                    },
                    {
                        label: 'Çalışılan Saat',
                        data: it.worked,
                        fill: false,
                        tension: 0.3,
                        borderColor: '#f28e2b',
                        backgroundColor: '#f28e2b',
                        pointBackgroundColor: '#f28e2b',
                        pointBorderColor: '#fff',
                        pointRadius: 4
                    }
                ]
            };
            const cfg = { type: 'line', data: data, options: { responsive: true, plugins: { legend: { display: true } } } };
            ctx._chart = new Chart(ctx, cfg);
        });
    }

    window.renderCategoryChart = function (labels, values) {
        const ctx = document.getElementById('categoryChart');
        if (!ctx || !window.Chart) return;
        if (ctx._chart) { ctx._chart.destroy(); }

        const data = {
            labels: labels,
            datasets: [{
                label: 'Kategori Harcaması',
                data: values,
                backgroundColor: [
                    '#4e79a7',
                    '#f28e2b',
                    '#e15759',
                    '#76b7b2',
                    '#59a14f',
                    '#edc949',
                    '#af7aa1',
                    '#ff9da7',
                    '#9c755f',
                    '#bab0ab'
                ],
                borderColor: '#fff',
                borderWidth: 2
            }]
        };

        const cfg = {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                cutout: '60%', // donut görünümü
                plugins: {
                    legend: { position: 'right' },
                    tooltip: {
                        callbacks: {
                            label: (ctx) => {
                                const v = ctx.parsed;
                                const total = ctx.dataset.data.reduce((a,b)=>a+b,0);
                                const pct = total ? Math.round(v * 100 / total) : 0;
                                return `${ctx.label}: ₺${Number(v).toLocaleString('tr-TR', { minimumFractionDigits: 2 })} (%${pct})`;
                            }
                        }
                    }
                }
            }
        };

        ctx._chart = new Chart(ctx, cfg);
    }
</script>

@code {
    private bool _canViewAll;
    private Guid? _selectedUserId;
    private List<IdentityUserDto> _users = new();
    private DashboardDto? dashboard;
    private bool _chartRendered;

    protected override async Task OnInitializedAsync()
    {
        _canViewAll = await AuthorizationService.IsGrantedAsync(ExpenseTrackerPermissions.Dashboard.ViewAll);
        if (_canViewAll)
        {
            // Load a lightweight page of users (adjust PageSize as you wish)
            var input = new GetIdentityUsersInput { MaxResultCount = 1000 };
            var list = await IdentityUserAppService.GetListAsync(input);
            _users = list.Items.ToList();
        }

        // if admin selected a specific user, ask backend for that user's dashboard; otherwise null => all / current
        var uid = _canViewAll ? _selectedUserId : null;
        dashboard = await DashboardAppService.GetDashboardDataAsync(uid);
    }

    private async Task OnUserChanged(ChangeEventArgs e)
    {
        var value = e?.Value?.ToString();
        _selectedUserId = Guid.TryParse(value, out var gid) ? gid : null;
        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        _chartRendered = false; // force chart re-render
        var uid = _canViewAll ? _selectedUserId : null;
        dashboard = await DashboardAppService.GetDashboardDataAsync(uid);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (dashboard is null) return;
        if (!_chartRendered)
        {
            var labels   = dashboard.WeekLabels ?? new List<string>();
            var actual   = dashboard.ActualSeries ?? new List<decimal>();
            var invoiced = dashboard.InvoicedSeries ?? new List<decimal>();
            var worked   = (dashboard.WorkedHoursSeries ?? new List<int>()).Select(x => (decimal)x).ToList();

            await JS.InvokeVoidAsync(
                "renderWeeklyChart",
                labels.ToArray(),
                actual.ToArray(),
                invoiced.ToArray(),
                worked.ToArray()
            );

            // prepare per‑project mini charts (id, labels, actual, worked)
            var projectCharts = (dashboard.WeeklyDataByProject ?? new Dictionary<Guid, List<WeeklyChartDataDto>>())
                .Select(kvp => new
                {
                    id = $"pc-{kvp.Key:N}",
                    labels = (kvp.Value ?? new List<WeeklyChartDataDto>()).Select(v => v.WeekLabel).ToArray(),
                    actual = (kvp.Value ?? new List<WeeklyChartDataDto>()).Select(v => v.Actual).ToArray(),
                    worked = (kvp.Value ?? new List<WeeklyChartDataDto>()).Select(v => v.WorkedHours).ToArray()
                })
                .ToList();

            await JS.InvokeVoidAsync("renderProjectCharts", projectCharts);

            // category chart
            var cats = _visibleCategories;
            var catLabels = cats.Select(x => x.Name).ToArray();
            var catValues = cats.Select(x => x.Amount).ToArray();
            if (catLabels.Length > 0)
            {
                await JS.InvokeVoidAsync("renderCategoryChart", catLabels, catValues);
            }

            _chartRendered = true;
        }
    }

    // Defensive UI-side filter for rejected categories (works whether Status is string or enum, and is safe if property doesn't exist)
    private IReadOnlyList<DashboardDto.CategoryBreakdownDto> _visibleCategories
        => (dashboard?.CategoryBreakdown ?? new List<DashboardDto.CategoryBreakdownDto>())
            .Where(x => !IsRejected(x))
            .ToList();

    private static bool IsRejected(object? item)
    {
        if (item is null) return false;

        // Try to read a property named "Status" (string or enum)
        var prop = item.GetType().GetProperty("Status");
        if (prop is null) return false;

        var value = prop.GetValue(item);
        if (value is null) return false;

        // Works for string or enum
        var text = value.ToString();
        return text != null && text.Equals("Rejected", StringComparison.OrdinalIgnoreCase);
    }
}

<style>
    .list-group-item .fw-semibold { letter-spacing: .2px; }
    .list-group-item .badge { font-weight: 600; }
</style>
