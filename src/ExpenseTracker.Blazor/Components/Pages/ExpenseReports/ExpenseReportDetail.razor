@page "/expense-reports/{Id:guid}"
@using System.Globalization
@using System.Linq
@using System.Collections.Generic
@using System.Text.Json
@using ExpenseTracker.ExpenseReports
@using ExpenseTracker.ExpenseReports.Services
@inject IExpenseReportAppService ExpenseReportAppService
@inject NavigationManager Nav

<h3 class="mb-4">Masraf Raporu Detaylarƒ±</h3>

@if (_report is null)
{
    <div class="text-muted">Y√ºkleniyor...</div>
}
else
{
    <!-- √úst √ñzet Kartlarƒ± -->
    <div class="row g-3 mb-4">
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h5 class="card-title mb-1">@_report.Title</h5>
                            <div class="text-muted small">Rapor ID: @_report.Id</div>
                        </div>
                        <span class="badge bg-secondary">@_report.Status</span>
                    </div>

                    <hr />

                    <div class="row text-center">
                        <div class="col-4">
                            <div class="text-muted small">Toplam</div>
                            <div class="fs-5 fw-semibold">
                                @Currency(_report.TotalAmount, null)
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-muted small">Limit</div>
                            <div class="fs-5 fw-semibold">
                                @(HasLimit(_report.SpendingLimit)
                                    ? Currency(Val(_report.SpendingLimit), null)
                                    : "-")
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-muted small">Kalan</div>
                            <div class="fs-5 fw-semibold">
                                @(HasLimit(_report.SpendingLimit)
                                    ? Currency(Math.Max(0, Val(_report.SpendingLimit) - _report.TotalAmount), null)
                                    : "-")
                            </div>
                        </div>
                    </div>

                    @if (HasLimit(_report.SpendingLimit))
                    {
                        var limit = Val(_report.SpendingLimit);
                        var used = Math.Min(100, limit <= 0 ? 0 : (double)(_report.TotalAmount / limit) * 100);
                        <div class="progress mt-3" style="height: 8px;">
                            <div class="progress-bar @(used >= 90 ? "bg-danger" : used >= 70 ? "bg-warning" : "bg-success")"
                                 role="progressbar" style="width:@used%"></div>
                        </div>
                        <div class="small text-muted mt-1">@used.ToString("0.#")% kullanƒ±ldƒ±</div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-title mb-3">Ekler</h6>
                    @if (!string.IsNullOrWhiteSpace(_report.ReceiptFilePath))
                    {
                        <a class="btn btn-sm btn-outline-secondary" href="@_report.ReceiptFilePath" target="_blank" rel="noopener">
                            üìé Rapor Fi≈üi / Ek
                        </a>
                    }
                    else
                    {
                        <span class="text-muted">Bu rapora ait ek bulunmuyor.</span>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Kalemler -->
    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">Kalemler (@(_report.Items?.Count ?? 0))</h6>
                <div class="small text-muted">
                    Toplam: <b>@Currency(_report.TotalAmount, null)</b>
                </div>
            </div>
        </div>

        <div class="card-body p-0">
            @if (_report.Items is null || _report.Items.Count == 0)
            {
                <div class="p-4 text-muted">Bu rapora eklenmi≈ü kalem bulunmuyor.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width:120px;">Tarih</th>
                                <th>A√ßƒ±klama</th>
                                <th style="width:140px;" class="text-end">Tutar</th>
                                <th style="width:220px;">Fi≈ü / Ek</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var it in _report.Items.OrderByDescending(x => x.Date))
                        {
                            <tr>
                                <td>@(it.Date == default ? "-" : it.Date.ToString("yyyy-MM-dd"))</td>
                                <td>@(string.IsNullOrWhiteSpace(it.Description) ? "-" : it.Description)</td>
                                <td class="text-end">@Currency(it.Amount, null)</td>
                                <td>
                                    @{
                                        var files = GetReceiptFiles(it);
                                    }

                                    @if (files.Any())
                                    {
                                        <div class="d-flex flex-wrap gap-2">
                                            @foreach (var path in files)
                                            {
                                                <a class="btn btn-sm btn-outline-secondary" href="@path" target="_blank" rel="noopener">G√∂r√ºnt√ºle</a>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">‚Äî</span>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-outline-secondary" @onclick="GoBack">‚Üê Listeye D√∂n</button>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private ExpenseReportDto? _report;

    protected override async Task OnInitializedAsync()
    {
        _report = await ExpenseReportAppService.GetAsync(Id);
    }

    private void GoBack() => Nav.NavigateTo("/expense-reports");

    // SpendingLimit hem decimal hem decimal? olabilir: ikisini de destekle
    private static bool HasLimit(decimal? v) => v.HasValue && v.Value > 0m;
    private static decimal Val(decimal? v) => v ?? 0m;

    private static string Currency(decimal amount, string? currencyCode)
    {
        var code = string.IsNullOrWhiteSpace(currencyCode) ? "TRY" : currencyCode.ToUpperInvariant();
        var symbol = code switch
        {
            "TRY" => "‚Ç∫",
            "USD" => "$",
            "EUR" => "‚Ç¨",
            "GBP" => "¬£",
            _ => code + " "
        };
        return string.Format(CultureInfo.GetCultureInfo("tr-TR"), "{0:N2} {1}", amount, symbol);
    }

    private static IEnumerable<string> GetReceiptFiles(ExpenseItemDto it)
    {
        var list = new List<string>();

        // 1) Direct DTO collections
        if (it?.ReceiptPaths is IEnumerable<string> rpStr)
        {
            list.AddRange(rpStr.Where(s => !string.IsNullOrWhiteSpace(s)));
        }
        else if (it?.ReceiptPaths is IEnumerable<object> rpObj)
        {
            list.AddRange(rpObj
                .OfType<string>()
                .Where(s => !string.IsNullOrWhiteSpace(s)));
        }

        // 2) Single-path fallbacks
        else if (!string.IsNullOrWhiteSpace(it?.ReceiptFilePath)) list.Add(it!.ReceiptFilePath!);
        else if (!string.IsNullOrWhiteSpace(it?.ReceiptUrl))      list.Add(it!.ReceiptUrl!);
        else if (!string.IsNullOrWhiteSpace(it?.ReceiptImagePath))list.Add(it!.ReceiptImagePath!);

        // 3) ExtraProperties (ABP) ‚Äî robust parsing for string, array, or JsonElement
        try
        {
            if (it?.ExtraProperties is IDictionary<string, object> ep && ep.Count > 0)
            {
                if (ep.TryGetValue("ReceiptPaths", out var pathsObj))
                    list.AddRange(ExtractStrings(pathsObj));
                if (ep.TryGetValue("ReceiptFilePath", out var fileObj))
                    list.AddRange(ExtractStrings(fileObj));
                if (ep.TryGetValue("ReceiptUrl", out var urlObj))
                    list.AddRange(ExtractStrings(urlObj));
                if (ep.TryGetValue("ReceiptImagePath", out var imgObj))
                    list.AddRange(ExtractStrings(imgObj));
            }
        }
        catch
        {
            // ignore parsing errors, show what we can
        }

        return list.Where(x => !string.IsNullOrWhiteSpace(x))
                   .Distinct();
    }

    private static IEnumerable<string> ExtractStrings(object? value)
    {
        if (value is null) yield break;

        switch (value)
        {
            case string s when !string.IsNullOrWhiteSpace(s):
                yield return s;
                yield break;

            case IEnumerable<string> strEnum:
                foreach (var s in strEnum)
                    if (!string.IsNullOrWhiteSpace(s)) yield return s;
                yield break;

            case IEnumerable<object> objEnum:
                foreach (var o in objEnum)
                    if (o is string s2 && !string.IsNullOrWhiteSpace(s2)) yield return s2;
                yield break;

            case JsonElement je:
                if (je.ValueKind == JsonValueKind.String)
                {
                    var s = je.GetString();
                    if (!string.IsNullOrWhiteSpace(s)) yield return s!;
                }
                else if (je.ValueKind == JsonValueKind.Array)
                {
                    foreach (var el in je.EnumerateArray())
                    {
                        if (el.ValueKind == JsonValueKind.String)
                        {
                            var s = el.GetString();
                            if (!string.IsNullOrWhiteSpace(s)) yield return s!;
                        }
                    }
                }
                else if (je.ValueKind == JsonValueKind.Object)
                {
                    foreach (var key in new[] { "path", "url", "file" })
                    {
                        if (je.TryGetProperty(key, out var prop) && prop.ValueKind == JsonValueKind.String)
                        {
                            var s = prop.GetString();
                            if (!string.IsNullOrWhiteSpace(s)) yield return s!;
                        }
                    }
                }
                yield break;
        }
    }
}