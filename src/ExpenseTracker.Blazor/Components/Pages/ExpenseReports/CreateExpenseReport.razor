@page "/expense-reports/create"
@using ExpenseTracker.Projects
@using System.IO
@using ExpenseTracker.ExpenseReports
@using ExpenseTracker.ExpenseReports.Services
@using ExpenseTracker.Projects.Dto
@using ExpenseTracker.Projects.Services
@using Volo.Abp.Validation
@using Microsoft.AspNetCore.Components.Forms
@inject IExpenseReportAppService ExpenseReportAppService
@inject IProjectAppService ProjectAppService
@inject NavigationManager NavigationManager

<div class="page-header d-flex align-items-center justify-content-between mb-3">
    <div>
        <h3 class="page-title mb-1">Yeni Masraf Raporu</h3>
        <div class="text-muted small">Ba≈ülƒ±k, limit ve proje se√ßtikten sonra kalemlerinizi ekleyin. Fi≈üleri satƒ±r bazƒ±nda y√ºkleyebilirsiniz.</div>
    </div>
    <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="Cancel">Geri D√∂n</button>
</div>

<EditForm Model="createModel" OnValidSubmit="CreateReport" OnInvalidSubmit="OnInvalidSubmitHandler">
    <DataAnnotationsValidator />
    <Blazorise.ValidationSummary />

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3">
                <!-- Ba≈ülƒ±k -->
                <div class="col-12 col-lg-6">
                    <label class="form-label fw-semibold">Ba≈ülƒ±k</label>
                    <InputText class="form-control" @bind-Value="createModel.Title" />
                    <ValidationMessage For="@(() => createModel.Title)" />
                </div>

                <!-- Harcama Limiti -->
                <div class="col-12 col-sm-6 col-lg-3">
                    <label class="form-label fw-semibold">Harcama Limiti (‚Ç∫)</label>
                    <InputNumber class="form-control" @bind-Value="createModel.SpendingLimit" />
                    <ValidationMessage For="@(() => createModel.SpendingLimit)" />
                </div>

                <!-- Proje Se√ßimi -->
                <div class="col-12 col-sm-6 col-lg-3">
                    <label class="form-label fw-semibold">Proje Se√ß</label>
                    <InputSelect class="form-select" @bind-Value="createModel.ProjectId">
                        <option value="@Guid.Empty">Proje Se√ßin</option>
                        @foreach (var project in projectList)
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => createModel.ProjectId)" />
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex align-items-center justify-content-between mb-2">
        <h5 class="mb-0">Masraf Kalemleri</h5>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddItem">+ Kalem Ekle</button>
            <button type="button" class="btn btn-outline-warning btn-sm" @onclick="AddSampleProject">üìå √ñrnek Proje Ekle</button>
        </div>
    </div>

    @foreach (var pair in createModel.Items.Select((value, index) => new { value, index }))
    {
        var row = pair.value;
        <div class="card item-card shadow-sm mb-3">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="small text-muted fw-semibold">Kalem @(pair.index + 1)</div>
                <button type="button" class="btn btn-link text-danger p-0 small" title="Kaldƒ±r" @onclick="() => RemoveItem(row)">Kaldƒ±r</button>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-12 col-md-4">
                        <label class="form-label small">Masraf Adƒ±</label>
                        <InputText class="form-control" placeholder="√ñrn. Otel" @bind-Value="row.Name" />
                        <ValidationMessage For="@(() => row.Name)" />
                    </div>
                    <div class="col-12 col-md-5">
                        <label class="form-label small">A√ßƒ±klama</label>
                        <InputText class="form-control" placeholder="Kƒ±sa a√ßƒ±klama" @bind-Value="row.Description" />
                        <ValidationMessage For="@(() => row.Description)" />
                    </div>
                    <div class="col-6 col-md-3">
                        <label class="form-label small">Tutar (‚Ç∫)</label>
                        <InputNumber class="form-control" placeholder="0" @bind-Value="row.Amount" />
                        <ValidationMessage For="@(() => row.Amount)" />
                    </div>

                    <div class="col-12 col-md-3">
                        <label class="form-label small">Kategori</label>
                        <InputSelect class="form-select" @bind-Value="row.Category">
                            <option value="">Kategori Se√ßin</option>
                            @foreach (var category in categoryList)
                            {
                                <option value="@category">@category</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => row.Category)" />
                    </div>
                    <div class="col-6 col-md-3">
                        <label class="form-label small">√áalƒ±≈üma Saati</label>
                        <InputNumber class="form-control" placeholder="0" @bind-Value="row.WorkedHours" />
                        <ValidationMessage For="@(() => row.WorkedHours)" />
                    </div>
                    <div class="col-6 col-md-3">
                        <label class="form-label small">Para Birimi</label>
                        <InputText class="form-control" placeholder="√ñrn. TRY, USD" @bind-Value="row.Currency" />
                        <ValidationMessage For="@(() => row.Currency)" />
                    </div>

                    <!-- Fi≈ü Y√ºkleme -->
                    <div class="col-12 col-md-3">
                        <label class="form-label small mb-1">Fi≈ü / Ek</label>
                        <InputFile OnChange="@((InputFileChangeEventArgs e) => UploadFile(e, row))" />
                        @if (row.ReceiptPaths != null && row.ReceiptPaths.Any())
                        {
                            <ul class="file-list mt-2">
                                @foreach (var path in row.ReceiptPaths)
                                {
                                    <li><a href="@path" target="_blank">üìé Fi≈üi G√∂r√ºnt√ºle</a></li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="d-flex gap-2 mt-3">
        <button type="submit" class="btn btn-primary" disabled="@(createModel.ProjectId == Guid.Empty)">Kaydet</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">Vazge√ß</button>
    </div>
</EditForm>

<style>
    .page-title { font-weight: 800; }
    .item-card .card-header { background: #f8f9fa; }
    .file-list { list-style: none; padding-left: 0; margin: 0; }
    .file-list li { margin-bottom: .25rem; }
    @@media (min-width: 992px) {
        .item-card .form-control, .item-card .form-select { height: 38px; }
    }
</style>

@code {
    private void OnInvalidSubmitHandler()
    {
        Console.WriteLine("‚ùå Form ge√ßersiz");
    }

    private void Cancel() => NavigationManager.NavigateTo("/expense-reports");

    private List<string> categoryList = new()
    {
        "Ula≈üƒ±m", "Konaklama", "Yemek", "Ofis", "Ekipman", "Yolculuk", "Diƒüer"
    };

    private CreateExpenseReportDto createModel = new()
    {
        Items = new List<CreateExpenseItemDto> { new() }
    };

    private List<ProjectDto> projectList = new();

    protected override async Task OnInitializedAsync()
    {
        projectList = await ProjectAppService.GetListAsync();

        // Eƒüer hi√ß proje yoksa √∂rnek projeleri bir kere ekle ve listeyi tazele
        if (projectList == null || projectList.Count == 0)
        {
            await ProjectAppService.CreateSampleProjectAsync();
            projectList = await ProjectAppService.GetListAsync();
        }

        // Varsayƒ±lan olarak ilk projeyi se√ß
        if (projectList != null && projectList.Count > 0 && createModel.ProjectId == Guid.Empty)
        {
            createModel.ProjectId = projectList.OrderBy(p => p.Name).First().Id;
        }
    }

    private async Task CreateReport()
    {
        Console.WriteLine("üü¢ CreateReport metodu √ßalƒ±≈ütƒ±");
        try
        {
            if (createModel.ProjectId == Guid.Empty)
            {
                Console.WriteLine("‚ùå L√ºtfen bir proje se√ßiniz.");
                return;
            }

            await ExpenseReportAppService.CreateAsync(createModel);
            NavigationManager.NavigateTo("/expense-reports");
        }
        catch (Exception ex)
        {
            Console.WriteLine("‚ùó HATA OLU≈ûTU: " + ex.Message);
            Console.WriteLine("üîç InnerException: " + ex.InnerException?.Message);
            Console.WriteLine("üìå StackTrace: " + ex.StackTrace);
            if (ex is AbpValidationException vex)
            {
                foreach (var error in vex.ValidationErrors)
                {
                    Console.WriteLine($"‚ùå Validation Error: {error.ErrorMessage}");
                }
            }
            if (ex.InnerException != null)
            {
                Console.WriteLine("üìå Inner StackTrace: " + ex.InnerException.StackTrace);
            }
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e, CreateExpenseItemDto item)
    {
        var file = e.File;
        var filePath = Path.Combine("wwwroot", "receipts", file.Name);

        using var stream = File.Create(filePath);
        await file.OpenReadStream().CopyToAsync(stream);

        if (item.ReceiptPaths == null)
        {
            item.ReceiptPaths = new List<string>();
        }
        item.ReceiptPaths.Add($"/receipts/{file.Name}");
    }

    private void AddItem()
    {
        createModel.Items ??= new List<CreateExpenseItemDto>();
        createModel.Items.Add(new CreateExpenseItemDto());
    }

    private void RemoveItem(CreateExpenseItemDto item)
    {
        createModel.Items?.Remove(item);
    }

    private async Task AddSampleProject()
    {
        await ProjectAppService.CreateSampleProjectAsync();
        projectList = await ProjectAppService.GetListAsync();

        if (projectList != null && projectList.Count > 0)
        {
            // Kullanƒ±cƒ± i√ßin bir se√ßim olsun
            createModel.ProjectId = projectList.OrderBy(p => p.Name).First().Id;
        }

        Console.WriteLine("üìå √ñrnek proje eklendi.");
        StateHasChanged();
    }
}
