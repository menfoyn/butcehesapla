@page "/expense-reports/create"
@using ExpenseTracker.Projects
@using System.IO
@using ExpenseTracker.ExpenseReports
@using ExpenseTracker.ExpenseReports.Services
@using ExpenseTracker.Projects.Dto
@using ExpenseTracker.Projects.Services
@using Volo.Abp.Validation
@inject IExpenseReportAppService ExpenseReportAppService
@inject IProjectAppService ProjectAppService
@inject NavigationManager NavigationManager
<h3>CreateExpenseReport</h3>
<EditForm Model="createModel" OnValidSubmit="CreateReport" OnInvalidSubmit="@(() => Console.WriteLine("‚ùå Form ge√ßersiz"))">
    <DataAnnotationsValidator />
    <Blazorise.ValidationSummary />

    <!-- Ba≈ülƒ±k -->
    <div class="mb-3">
        <label>Ba≈ülƒ±k</label>
        <InputText class="form-control" @bind-Value="createModel.Title" />
        <ValidationMessage For="@(() => createModel.Title)" />
    </div>

    <!-- Harcama Limiti -->
    <div class="mb-3">
        <label>Harcama Limiti (‚Ç∫)</label>
        <InputNumber class="form-control" @bind-Value="createModel.SpendingLimit" />
        <ValidationMessage For="@(() => createModel.SpendingLimit)" />
    </div>

    <!-- Proje Se√ßimi -->
    <div class="mb-3">
        <label>Proje Se√ß</label>
        <InputSelect class="form-control" @bind-Value="createModel.ProjectId">
            <option value="@Guid.Empty">Proje Se√ßin</option>
            @foreach (var project in projectList)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => createModel.ProjectId)" />
    </div>

    <!-- Masraf Kalemleri -->
    @foreach (var item in createModel.Items)
    {
        <div class="border p-3 mb-3 rounded">
            <InputText class="form-control mb-2" placeholder="Masraf Adƒ±" @bind-Value="item.Name" />
            <ValidationMessage For="@(() => item.Name)" />
            <InputText class="form-control mb-2" placeholder="A√ßƒ±klama" @bind-Value="item.Description" />
            <ValidationMessage For="@(() => item.Description)" />
            <InputNumber class="form-control mb-2" placeholder="Tutar ‚Ç∫" @bind-Value="item.Amount" />
            <ValidationMessage For="@(() => item.Amount)" />
            <InputSelect class="form-control mb-2" @bind-Value="item.Category">
                <option value="">Kategori Se√ßin</option>
                @foreach (var category in categoryList)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => item.Category)" />
            <InputNumber class="form-control mb-2" placeholder="√áalƒ±≈üma Saati" @bind-Value="item.WorkedHours" />
            <ValidationMessage For="@(() => item.WorkedHours)" />
            <InputText class="form-control mb-2" placeholder="Para Birimi (√∂rneƒüin: TRY, USD)" @bind-Value="item.Currency" />
            <ValidationMessage For="@(() => item.Currency)" />

            <!-- Fi≈ü Y√ºkleme -->
            <InputFile OnChange="e => UploadFile(e, item)" />

            @if (item.ReceiptPaths != null && item.ReceiptPaths.Any())
            {
                <div class="mt-2">
                    @foreach (var path in item.ReceiptPaths)
                    {
                        <div>
                            <a href="@path" target="_blank">üìé Fi≈üi G√∂r√ºnt√ºle</a>
                        </div>
                    }
                </div>
            }
        </div>
    }

    <button type="submit" class="btn btn-primary mt-3" disabled="@(createModel.ProjectId == Guid.Empty)">Kaydet</button>
    <button type="button" class="btn btn-info" @onclick='() => Console.WriteLine("üß™ Tƒ±klandƒ±")'>Test</button>
    <button class="btn btn-warning" @onclick="AddSampleProject">üìå √ñrnek Proje Ekle</button>
</EditForm>
@code {
    private List<string> categoryList = new()
    {
        "Ula≈üƒ±m", "Konaklama", "Yemek", "Ofis", "Ekipman", "Yolculuk", "Diƒüer"
    };

    private CreateExpenseReportDto createModel = new()
    {
        Items = new List<CreateExpenseItemDto> { new() }
    };

    private List<ProjectDto> projectList = new();

    protected override async Task OnInitializedAsync()
    {
        projectList = await ProjectAppService.GetListAsync();

        // Eƒüer hi√ß proje yoksa √∂rnek projeleri bir kere ekle ve listeyi tazele
        if (projectList == null || projectList.Count == 0)
        {
            await ProjectAppService.CreateSampleProjectAsync();
            projectList = await ProjectAppService.GetListAsync();
        }

        // Varsayƒ±lan olarak ilk projeyi se√ß
        if (projectList != null && projectList.Count > 0 && createModel.ProjectId == Guid.Empty)
        {
            createModel.ProjectId = projectList.OrderBy(p => p.Name).First().Id;
        }
    }

    private async Task CreateReport()
    {
        Console.WriteLine("üü¢ CreateReport metodu √ßalƒ±≈ütƒ±");
        try
        {
            if (createModel.ProjectId == Guid.Empty)
            {
                Console.WriteLine("‚ùå L√ºtfen bir proje se√ßiniz.");
                return;
            }

            await ExpenseReportAppService.CreateAsync(createModel);
            NavigationManager.NavigateTo("/expense-reports");
        }
        catch (Exception ex)
        {
            Console.WriteLine("‚ùó HATA OLU≈ûTU: " + ex.Message);
            Console.WriteLine("üîç InnerException: " + ex.InnerException?.Message);
            Console.WriteLine("üìå StackTrace: " + ex.StackTrace);
            if (ex is AbpValidationException vex)
            {
                foreach (var error in vex.ValidationErrors)
                {
                    Console.WriteLine($"‚ùå Validation Error: {error.ErrorMessage}");
                }
            }
            if (ex.InnerException != null)
            {
                Console.WriteLine("üìå Inner StackTrace: " + ex.InnerException.StackTrace);
            }
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e, CreateExpenseItemDto item)
    {
        var file = e.File;
        var filePath = Path.Combine("wwwroot", "receipts", file.Name);

        using var stream = File.Create(filePath);
        await file.OpenReadStream().CopyToAsync(stream);

        if (item.ReceiptPaths == null)
        {
            item.ReceiptPaths = new List<string>();
        }
        item.ReceiptPaths.Add($"/receipts/{file.Name}");
    }

    private async Task AddSampleProject()
    {
        await ProjectAppService.CreateSampleProjectAsync();
        projectList = await ProjectAppService.GetListAsync();

        if (projectList != null && projectList.Count > 0)
        {
            // Kullanƒ±cƒ± i√ßin bir se√ßim olsun
            createModel.ProjectId = projectList.OrderBy(p => p.Name).First().Id;
        }

        Console.WriteLine("üìå √ñrnek proje eklendi.");
        StateHasChanged();
    }
}
