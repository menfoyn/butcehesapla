@page "/expense-reports"
@using ExpenseTracker.ExpenseReports
@using ExpenseTracker.ExpenseReports.Services
@inject IExpenseReportAppService ExpenseReportAppService
@inject NavigationManager NavigationManager
@using System.Linq

<h3>Masraf Raporları</h3>

@if (isLoading)
{
    <p>Yükleniyor...</p>
}
else if (reports == null || !reports.Any())
{
    <p>Hiç masraf raporu bulunamadı.</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="NavigateToCreate">
        + Yeni Rapor Ekle
    </button>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Toplam Tutar</th>
                <th>Durum</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        
        @foreach (var report in reports)
        {
            <tr>
                <td>@report.Id</td>
                <td>@report.TotalAmount ₺</td>
                <td>@report.Status</td>

                <td>
                    <button class="btn btn-sm btn-info me-1" @onclick="() => ViewDetails(report.Id)">Detay</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteReport(report.Id)">Sil</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<ExpenseReportDto> reports;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadReportsAsync();
    }

    private async Task LoadReportsAsync()
    {
        isLoading = true;
        try
        {
            var result = await ExpenseReportAppService.GetListAsync();
            reports = result ?? new List<ExpenseReportDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reports: {ex.Message}");
            reports = new List<ExpenseReportDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/expense-reports/create");
    }

    private void ViewDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/expense-reports/{id}");
    }

    private async Task DeleteReport(Guid id)
    {
        try
        {
            await ExpenseReportAppService.DeleteAsync(id);
            await LoadReportsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting report: {ex.Message}");
        }
    }
}