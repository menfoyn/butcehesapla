@page "/expense-reports"
@using System.Globalization
@using ExpenseTracker.ExpenseReports
@using ExpenseTracker.ExpenseReports.Services
@using ExpenseTracker.Projects.Services
@inject IExpenseReportAppService ExpenseReportAppService
@inject IProjectAppService ProjectAppService
@inject NavigationManager NavigationManager
@using System.Linq

<div class="page-toolbar">
    <div class="left">
        <h3 class="page-title mb-0">Masraf RaporlarÄ±</h3>
        <span class="muted ms-2 d-none d-sm-inline">(@FilteredReports.Count() adet)</span>
    </div>
    <div class="right d-flex align-items-center gap-2">
        <div class="search-wrap">
            <span class="search-icon">ðŸ”Ž</span>
            <input class="form-control form-control-sm search-input" placeholder="Ara: baÅŸlÄ±k, proje, durumâ€¦" @bind="search" @bind:event="oninput" />
        </div>
        <button class="btn btn-primary" @onclick="NavigateToCreate">
            + Yeni Rapor Ekle
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="text-muted">YÃ¼kleniyor...</div>
}
else if (reports == null || !reports.Any())
{
    <div class="alert alert-light border">HiÃ§ masraf raporu bulunamadÄ±.</div>
}
else
{
    <div class="table-responsive">
        <table class="table align-middle">
            <thead class="table-light">
                <tr>
                    <th style="min-width: 280px;">Kategori / Proje / BaÅŸlÄ±k</th>
                    <th style="width: 140px;" class="text-end">Toplam</th>
                    <th style="width: 120px;">Durum</th>
                    <th style="width: 160px;" class="text-end">Ä°ÅŸlemler</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var report in FilteredReports)
            {
                <tr>
                    <td>
                        <div class="fw-semibold">@DisplayProject(report)</div>
                        @if (_categoriesById.TryGetValue(report.Id, out var cats) && cats.Any())
                        {
                            <div class="mt-1">
                                @foreach (var c in cats)
                                {
                                    <span class="badge bg-light border text-dark me-1">@c</span>
                                }
                            </div>
                        }
                        <div class="subtle text-truncate">@(!string.IsNullOrWhiteSpace(report.Title) ? report.Title : "(BaÅŸlÄ±ksÄ±z)")</div>
                    </td>
                    <td class="text-end">@Currency(report.TotalAmount, null)</td>
                    <td>
                        <span class="badge @StatusBadge(report.Status)">@report.Status</span>
                    </td>
                    <td class="text-end">
                        <div class="btn-group btn-group-sm" role="group">
                            <button class="btn btn-outline-primary" title="Detay" @onclick="() => ViewDetails(report.Id)">Detay</button>
                            <button class="btn btn-outline-danger" title="Sil" @onclick="() => DeleteReport(report.Id)">Sil</button>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <div class="table-hint text-muted small mt-2">Toplam: @FilteredReports.Count() kayÄ±t</div>
    </div>
}

<style>
/* Toolbar */
.page-toolbar { display:flex; align-items:center; justify-content:space-between; margin-bottom:1rem; }
.page-toolbar .left { display:flex; align-items:center; }
.page-title { font-weight:800; letter-spacing:.2px; }
.muted { color:#6c757d; font-weight:500; }
.search-wrap { position:relative; }
.search-icon { position:absolute; left:.5rem; top:50%; transform:translateY(-50%); opacity:.6; }
.search-input { padding-left:1.8rem; min-width:220px; }

/* Table polish */
.table-responsive { border-radius:.75rem; box-shadow:0 1px 2px rgba(16,24,40,.06), 0 1px 1px rgba(16,24,40,.04); background:#fff; }
.table { margin-bottom:0; }
.table thead th { font-weight:700; letter-spacing:.2px; color:#495057; border-bottom:1px solid #e9ecef; }
.table tbody tr { transition:background .15s ease, transform .05s ease; }
.table tbody tr:hover { background:#fafbfc; }
.table .badge { font-weight:600; border:1px solid rgba(0,0,0,.08); }

/* Status pill palette */
.badge.bg-success { background: #e6f4ea!important; color:#157347; border-color:#cce9d5!important; }
.badge.bg-info { background:#e7f1fb!important; color:#0a58ca; border-color:#d3e4fa!important; }
.badge.bg-danger { background:#fde7ea!important; color:#b02a37; border-color:#f7ccd2!important; }
.badge.bg-warning { background:#fff6e6!important; color:#997404; border-color:#ffe7ba!important; }
.badge.bg-secondary { background:#eef1f4!important; color:#495057; border-color:#e2e6ea!important; }
.badge.text-dark { color:#664d03!important; }

/* Subtle secondary line under main label */
.subtle { color:#6c757d; font-size:.875rem; }

/* Amount column alignment tweak */
.table td.text-end, .table th.text-end { white-space:nowrap; }

/* Small footer hint */
.table-hint { padding:.25rem .25rem .75rem .25rem; }

/* Category badges spacing */
.badge + .badge { margin-left:.25rem; }

@@media (max-width: 576px) {
  .search-input { min-width: 160px; }
  .page-toolbar { flex-direction: column; align-items: stretch; gap:.5rem; }
  .page-toolbar .right { justify-content: space-between; }
}
</style>

@code {
    private string search = string.Empty;

    private IEnumerable<ExpenseReportDto> FilteredReports =>
        string.IsNullOrWhiteSpace(search)
            ? reports
            : reports.Where(r =>
                (r.Title?.Contains(search, StringComparison.CurrentCultureIgnoreCase) ?? false) ||
                (r.ProjectName?.Contains(search, StringComparison.CurrentCultureIgnoreCase) ?? false) ||
                (r.Status?.Contains(search, StringComparison.CurrentCultureIgnoreCase) ?? false) ||
                (_displayNameById.TryGetValue(r.Id, out var dn) && dn.Contains(search, StringComparison.CurrentCultureIgnoreCase))
            );

    private List<ExpenseReportDto> reports = new();
    private bool isLoading = true;
    // ReportId -> Resolved display label (Category or ProjectName)
    private readonly Dictionary<Guid, string> _displayNameById = new();
    // ReportId -> Distinct categories in the report (for visual badges)
    private readonly Dictionary<Guid, List<string>> _categoriesById = new();
    // ProjectId -> Project Name (for quick lookup)
    private readonly Dictionary<Guid, string> _projectNameById = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectsAsync();
        await LoadReportsAsync();
    }

    private async Task LoadProjectsAsync()
    {
        _projectNameById.Clear();
        try
        {
            var projects = await ProjectAppService.GetListAsync();
            if (projects != null)
            {
                foreach (var p in projects.Where(p => p != null && p.Id != Guid.Empty && !string.IsNullOrWhiteSpace(p.Name)))
                {
                    _projectNameById[p.Id] = p.Name!.Trim();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
    }

    private async Task LoadReportsAsync()
    {
        isLoading = true;
        try
        {
            var result = await ExpenseReportAppService.GetListAsync();
            reports = result ?? new List<ExpenseReportDto>();

            // Items Ã§oÄŸu list DTO'da gelmediÄŸi iÃ§in kategori/proje adÄ±nÄ±
            // detay servisi Ã¼zerinden Ã¶nceden Ã§Ã¶zÃ¼yoruz.
            await PreloadDisplayNamesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reports: {ex.Message}");
            reports = new List<ExpenseReportDto>();
            _displayNameById.Clear();
            _categoriesById.Clear();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PreloadDisplayNamesAsync()
    {
        _displayNameById.Clear();
        _categoriesById.Clear();

        foreach (var r in reports)
        {
            try
            {
                // Detay Ã§aÄŸrÄ±sÄ±: Items ve ProjectName kesin gelir
                var full = await ExpenseReportAppService.GetAsync(r.Id);

                // Kategori ismi (ilk kategori) ya da Proje adÄ±
                var firstCategory = full?.Items?.FirstOrDefault(i => !string.IsNullOrWhiteSpace(i?.Category))?.Category;
                string? name = null;

                if (!string.IsNullOrWhiteSpace(firstCategory))
                {
                    name = firstCategory!.ToUpperInvariant();
                }
                else if (!string.IsNullOrWhiteSpace(full?.ProjectName))
                {
                    name = full!.ProjectName!.ToUpperInvariant();
                }
                else if (!string.IsNullOrWhiteSpace(r?.ProjectName))
                {
                    name = r!.ProjectName!.ToUpperInvariant();
                }
                if (string.IsNullOrWhiteSpace(name) && r.ProjectId != Guid.Empty && _projectNameById.TryGetValue(r.ProjectId, out var pn) && !string.IsNullOrWhiteSpace(pn))
                {
                    name = pn;
                }

                _displayNameById[r.Id] = name ?? "(KATEGORÄ° / PROJE YOK)";

                // Distinct kategori rozetleri
                var cats = full?.Items?
                    .Where(i => !string.IsNullOrWhiteSpace(i?.Category))
                    .Select(i => i!.Category!.Trim())
                    .Distinct(StringComparer.InvariantCultureIgnoreCase)
                    .ToList() ?? new List<string>();

                _categoriesById[r.Id] = cats;
            }
            catch
            {
                _displayNameById[r.Id] = "(KATEGORÄ° / PROJE YOK)";
                _categoriesById[r.Id] = new List<string>();
            }
        }
    }

    private void NavigateToCreate() => NavigationManager.NavigateTo("/expense-reports/create");

    private void ViewDetails(Guid id) => NavigationManager.NavigateTo($"/expense-reports/{id}");

    private async Task DeleteReport(Guid id)
    {
        try
        {
            await ExpenseReportAppService.DeleteAsync(id);
            await LoadReportsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting report: {ex.Message}");
        }
    }

    // --- UI helpers ---
    private string DisplayProject(ExpenseReportDto r)
    {
        // Ã–nce cache
        if (r != null && _displayNameById.TryGetValue(r.Id, out var cached) && !string.IsNullOrWhiteSpace(cached))
            return cached;

        // HÄ±zlÄ± fallback: liste DTO'sunda proje varsa
        if (!string.IsNullOrWhiteSpace(r?.ProjectName))
            return r!.ProjectName!.ToUpperInvariant();

        // Fallback: resolve by ProjectId via cached project list
        if (r != null && r.ProjectId != Guid.Empty && _projectNameById.TryGetValue(r.ProjectId, out var pname) && !string.IsNullOrWhiteSpace(pname))
            return pname.ToUpperInvariant();

        // HÄ±zlÄ± fallback: liste DTO'sunda item ve kategori varsa
        var category = r?.Items?.FirstOrDefault()?.Category;
        if (!string.IsNullOrWhiteSpace(category))
            return category!.ToUpperInvariant();

        return "(KATEGORÄ° / PROJE YOK)";
    }

    private static string StatusBadge(string? status)
    {
        return status?.ToLowerInvariant() switch
        {
            "approved" => "bg-success",
            "completed" => "bg-success",
            "invoiced" => "bg-info",
            "rejected" => "bg-danger",
            "pending" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private static string Currency(decimal amount, string? currencyCode)
    {
        currencyCode = string.IsNullOrWhiteSpace(currencyCode) ? "TRY" : currencyCode.ToUpperInvariant();
        var symbol = currencyCode switch
        {
            "TRY" => "â‚º",
            "USD" => "$",
            "EUR" => "â‚¬",
            "GBP" => "Â£",
            _ => currencyCode + " "
        };
        return string.Format(CultureInfo.GetCultureInfo("tr-TR"), "{0:N2} {1}", amount, symbol);
    }
}